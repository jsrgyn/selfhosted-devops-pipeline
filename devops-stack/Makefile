# Makefile para DevOps Stack
# Uso: make [comando]

# Vari√°veis
COMPOSE_FILE = docker-compose.yml
PROJECT_NAME = devops-stack
BACKUP_DIR = ./backup/$(shell date +%Y%m%d_%H%M%S)

# Cores para output
RED = \033[0;31m
GREEN = \033[0;32m
YELLOW = \033[1;33m
BLUE = \033[0;34m
NC = \033[0m # No Color

.PHONY: help setup up down restart status logs clean backup restore health check-env

# Comando padr√£o
.DEFAULT_GOAL := help

## Comandos Principais
help: ## Exibe esta ajuda
	@echo "$(BLUE)DevOps Stack - Comandos Dispon√≠veis:$(NC)"
	@echo ""
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(YELLOW)%-15s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""
	@echo "$(GREEN)Exemplo de uso:$(NC)"
	@echo "  make setup    # Primeira configura√ß√£o"
	@echo "  make up       # Subir todos os servi√ßos"
	@echo "  make logs     # Ver logs em tempo real"
	@echo ""

setup: ## Configura√ß√£o inicial do projeto
	@echo "$(BLUE)üöÄ Configurando o ambiente DevOps...$(NC)"
	@if [ ! -f .env ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  Criando .env a partir do template...$(NC)"; \
		cp .env.example .env; \
		echo "$(RED)‚ùó IMPORTANTE: Configure suas vari√°veis no arquivo .env antes de continuar!$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)üìÅ Criando estrutura de diret√≥rios...$(NC)"
	@mkdir -p config/{nginx/{conf.d,html/{dashboard,errors},ssl},gitea,drone,postgres/{init-scripts,conf}}
	@mkdir -p data/{gitea/{repositories,data,log,avatars},postgres,sonarqube/{data,extensions,logs},drone,build-server/{builds,cache,artifacts}}
	@mkdir -p secrets/{ssh,ssl/{certificates,keys},auth}
	@mkdir -p build/{nginx,build-server,custom-images}
	@mkdir -p scripts monitoring/{prometheus,grafana/{dashboards,provisioning},logs}
	@mkdir -p backup/{automated,manual,scripts} docs/{api-docs,architecture/{diagrams,decisions}}
	@mkdir -p tests/{integration,smoke,load}
	@echo "$(GREEN)üîë Configurando permiss√µes...$(NC)"
	@chmod 700 secrets/
	@chmod 600 secrets/ssh/* 2>/dev/null || true
	@echo "$(GREEN)üîß Gerando chaves SSH se n√£o existirem...$(NC)"
	@if [ ! -f secrets/ssh/id_rsa ]; then \
		ssh-keygen -t rsa -b 4096 -f secrets/ssh/id_rsa -N "" -C "drone-runner@devops-stack"; \
	fi
	@echo "$(GREEN)üìã Criando arquivos de configura√ß√£o base...$(NC)"
	@$(MAKE) create-configs
	@echo "$(GREEN)‚úÖ Setup conclu√≠do! Execute 'make up' para iniciar os servi√ßos.$(NC)"

create-configs: ## Cria arquivos de configura√ß√£o b√°sicos
	@echo "$(BLUE)üìù Criando configura√ß√µes b√°sicas...$(NC)"
	@if [ ! -f config/postgres/init-scripts/01-init-databases.sql ]; then \
		echo "-- Script de inicializa√ß√£o dos bancos" > config/postgres/init-scripts/01-init-databases.sql; \
		echo "CREATE DATABASE gitea_db;" >> config/postgres/init-scripts/01-init-databases.sql; \
		echo "CREATE DATABASE drone_db;" >> config/postgres/init-scripts/01-init-databases.sql; \
		echo "CREATE DATABASE sonarqube_db;" >> config/postgres/init-scripts/01-init-databases.sql; \
	fi

up: check-env ## Inicia todos os servi√ßos
	@echo "$(BLUE)üöÄ Iniciando o stack DevOps...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) up -d
	@echo "$(GREEN)‚úÖ Servi√ßos iniciados com sucesso!$(NC)"
	@$(MAKE) status

down: ## Para todos os servi√ßos
	@echo "$(YELLOW)üõë Parando todos os servi√ßos...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) down
	@echo "$(GREEN)‚úÖ Servi√ßos parados com sucesso!$(NC)"

restart: ## Reinicia todos os servi√ßos
	@echo "$(BLUE)üîÑ Reiniciando todos os servi√ßos...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) restart
	@echo "$(GREEN)‚úÖ Servi√ßos reiniciados com sucesso!$(NC)"

restart-service: ## Reinicia um servi√ßo espec√≠fico (uso: make restart-service SERVICE=nginx)
	@if [ -z "$(SERVICE)" ]; then \
		echo "$(RED)‚ùó Uso: make restart-service SERVICE=nome_do_servico$(NC)"; \
		exit 1; \
	fi
	@echo "$(BLUE)üîÑ Reiniciando servi√ßo $(SERVICE)...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) restart $(SERVICE)
	@echo "$(GREEN)‚úÖ Servi√ßo $(SERVICE) reiniciado!$(NC)"

status: ## Mostra status dos servi√ßos
	@echo "$(BLUE)üìä Status dos servi√ßos:$(NC)"
	@docker-compose -f $(COMPOSE_FILE) ps

logs: ## Mostra logs de todos os servi√ßos em tempo real
	@echo "$(BLUE)üìã Logs em tempo real (Ctrl+C para sair):$(NC)"
	@docker-compose -f $(COMPOSE_FILE) logs -f

logs-service: ## Mostra logs de um servi√ßo espec√≠fico (uso: make logs-service SERVICE=nginx)
	@if [ -z "$(SERVICE)" ]; then \
		echo "$(RED)‚ùó Uso: make logs-service SERVICE=nome_do_servico$(NC)"; \
		exit 1; \
	fi
	@echo "$(BLUE)üìã Logs do servi√ßo $(SERVICE):$(NC)"
	@docker-compose -f $(COMPOSE_FILE) logs -f $(SERVICE)

health: ## Verifica sa√∫de dos servi√ßos
	@echo "$(BLUE)üè• Verificando sa√∫de dos servi√ßos...$(NC)"
	@./scripts/health-check.sh || echo "$(YELLOW)‚ö†Ô∏è  Script de health check n√£o encontrado$(NC)"
	@docker-compose -f $(COMPOSE_FILE) ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"

## Comandos de Backup e Restore
backup: ## Executa backup completo
	@echo "$(BLUE)üíæ Iniciando backup completo...$(NC)"
	@mkdir -p $(BACKUP_DIR)
	@echo "$(YELLOW)üìä Backup do banco de dados...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) exec -T postgres_dbx pg_dumpall -U ${POSTGRES_USER} > $(BACKUP_DIR)/postgres_full_backup.sql
	@echo "$(YELLOW)üìÅ Backup dos volumes...$(NC)"
	@docker run --rm -v $(PWD)/data:/data -v $(PWD)/backup:/backup alpine tar czf /backup/$(shell basename $(BACKUP_DIR))/volumes_backup.tar.gz -C /data .
	@echo "$(YELLOW)üîß Backup das configura√ß√µes...$(NC)"
	@tar czf $(BACKUP_DIR)/config_backup.tar.gz config/
	@echo "$(YELLOW)üîë Backup dos secrets (criptografado)...$(NC)"
	@tar czf $(BACKUP_DIR)/secrets_backup.tar.gz secrets/ && gpg --cipher-algo AES256 --compress-algo 1 --s2k-mode 3 --s2k-digest-algo SHA512 --s2k-count 65536 --symmetric --output $(BACKUP_DIR)/secrets_backup.tar.gz.gpg $(BACKUP_DIR)/secrets_backup.tar.gz && rm $(BACKUP_DIR)/secrets_backup.tar.gz
	@echo "$(GREEN)‚úÖ Backup completo salvo em: $(BACKUP_DIR)$(NC)"

backup-db: ## Backup apenas do banco de dados
	@echo "$(BLUE)üíæ Backup do banco de dados...$(NC)"
	@mkdir -p backup/database
	@docker-compose -f $(COMPOSE_FILE) exec -T postgres_dbx pg_dumpall -U ${POSTGRES_USER} > backup/database/postgres_backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)‚úÖ Backup do banco conclu√≠do!$(NC)"

restore: ## Restaura backup (uso: make restore BACKUP_DIR=./backup/20231201_120000)
	@if [ -z "$(BACKUP_DIR)" ]; then \
		echo "$(RED)‚ùó Uso: make restore BACKUP_DIR=caminho_do_backup$(NC)"; \
		exit 1; \
	fi
	@echo "$(YELLOW)‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° sobrescrever dados existentes!$(NC)"
	@echo "$(YELLOW)Pressione Ctrl+C nos pr√≥ximos 10 segundos para cancelar...$(NC)"
	@sleep 10
	@echo "$(BLUE)üîÑ Restaurando backup...$(NC)"
	@$(MAKE) down
	@echo "$(YELLOW)üìÅ Restaurando volumes...$(NC)"
	@docker run --rm -v $(PWD)/data:/data -v $(PWD)/backup:/backup alpine tar xzf /backup/$(shell basename $(BACKUP_DIR))/volumes_backup.tar.gz -C /data
	@echo "$(YELLOW)üîß Restaurando configura√ß√µes...$(NC)"
	@tar xzf $(BACKUP_DIR)/config_backup.tar.gz
	@$(MAKE) up
	@sleep 30
	@echo "$(YELLOW)üìä Restaurando banco de dados...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) exec -T postgres_dbx psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} < $(BACKUP_DIR)/postgres_full_backup.sql
	@echo "$(GREEN)‚úÖ Restore conclu√≠do!$(NC)"

## Comandos de Manuten√ß√£o
clean: ## Remove containers, volumes e imagens n√£o utilizadas
	@echo "$(YELLOW)üßπ Limpando recursos n√£o utilizados...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) down -v --remove-orphans
	@docker system prune -f
	@docker volume prune -f
	@echo "$(GREEN)‚úÖ Limpeza conclu√≠da!$(NC)"

clean-all: ## Remove TUDO (cuidado!)
	@echo "$(RED)‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o remove TODOS os dados!$(NC)"
	@echo "$(YELLOW)Pressione Ctrl+C nos pr√≥ximos 15 segundos para cancelar...$(NC)"
	@sleep 15
	@$(MAKE) down
	@docker-compose -f $(COMPOSE_FILE) down -v --remove-orphans --rmi all
	@docker system prune -af --volumes
	@sudo rm -rf data/
	@echo "$(RED)üóëÔ∏è  Todos os dados foram removidos!$(NC)"

update: ## Atualiza as imagens dos containers
	@echo "$(BLUE)üîÑ Atualizando imagens...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) pull
	@echo "$(GREEN)‚úÖ Imagens atualizadas!$(NC)"
	@echo "$(YELLOW)üí° Execute 'make restart' para aplicar as atualiza√ß√µes$(NC)"

## Comandos de Desenvolvimento
dev: ## Inicia em modo de desenvolvimento
	@echo "$(BLUE)üõ†Ô∏è  Iniciando em modo desenvolvimento...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) -f docker-compose.dev.yml up -d
	@$(MAKE) status

build: ## Reconstr√≥i as imagens customizadas
	@echo "$(BLUE)üî® Reconstruindo imagens...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) build --no-cache
	@echo "$(GREEN)‚úÖ Build conclu√≠do!$(NC)"

shell: ## Acesso shell a um container (uso: make shell SERVICE=nginx)
	@if [ -z "$(SERVICE)" ]; then \
		echo "$(RED)‚ùó Uso: make shell SERVICE=nome_do_servico$(NC)"; \
		exit 1; \
	fi
	@docker-compose -f $(COMPOSE_FILE) exec $(SERVICE) /bin/sh

## Comandos de Monitoramento
monitor: ## Inicia stack de monitoramento
	@echo "$(BLUE)üìä Iniciando monitoramento...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) --profile monitoring up -d
	@echo "$(GREEN)‚úÖ Monitoramento ativo!$(NC)"

stats: ## Mostra estat√≠sticas de uso dos containers
	@echo "$(BLUE)üìà Estat√≠sticas dos containers:$(NC)"
	@docker stats --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"

## Comandos de Seguran√ßa
security-scan: ## Executa scan de seguran√ßa nos containers
	@echo "$(BLUE)üîç Executando scan de seguran√ßa...$(NC)"
	@docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
		-v $(PWD):/tmp/.hadolint/config \
		hadolint/hadolint:latest hadolint /tmp/.hadolint/config/*/Dockerfile || true
	@echo "$(GREEN)‚úÖ Scan de seguran√ßa conclu√≠do!$(NC)"

generate-secrets: ## Gera novos secrets para os servi√ßos
	@echo "$(BLUE)üîë Gerando novos secrets...$(NC)"
	@echo "GITEA_SECRET_KEY=$(shell openssl rand -hex 32)" > secrets/auth/gitea-secrets.env
	@echo "GITEA_INTERNAL_TOKEN=$(shell openssl rand -hex 32)" >> secrets/auth/gitea-secrets.env
	@echo "GITEA_OAUTH2_JWT_SECRET=$(shell openssl rand -hex 32)" >> secrets/auth/gitea-secrets.env
	@echo "DRONE_RPC_SECRET=$(shell openssl rand -hex 32)" > secrets/auth/drone-secrets.env
	@echo "$(GREEN)‚úÖ Secrets gerados em secrets/auth/$(NC)"
	@echo "$(YELLOW)üí° Adicione estes valores ao seu arquivo .env$(NC)"

## Utilit√°rios
check-env: ## Verifica se o arquivo .env existe
	@if [ ! -f .env ]; then \
		echo "$(RED)‚ùó Arquivo .env n√£o encontrado!$(NC)"; \
		echo "$(YELLOW)üí° Execute 'make setup' primeiro$(NC)"; \
		exit 1; \
	fi

info: ## Mostra informa√ß√µes do ambiente
	@echo "$(BLUE)‚ÑπÔ∏è  Informa√ß√µes do Ambiente:$(NC)"
	@echo "Projeto: $(PROJECT_NAME)"
	@echo "Compose File: $(COMPOSE_FILE)"
	@echo "Docker Version: $(shell docker --version)"
	@echo "Docker Compose Version: $(shell docker-compose --version)"
	@echo "Sistema: $(shell uname -a)"

ports: ## Lista as portas expostas
	@echo "$(BLUE)üåê Portas expostas:$(NC)"
	@echo "Nginx (HTTP): 80"
	@echo "Nginx (HTTPS): 443"
	@echo "PostgreSQL: 5432"
	@echo "Build Server: 8000"
	@echo ""
	@echo "$(BLUE)üåê Acessos via proxy:$(NC)"
	@echo "Gitea: https://gitea.local"
	@echo "Drone: https://drone.local"
	@echo "SonarQube: https://sonar.local"

test: ## Executa testes b√°sicos de conectividade
	@echo "$(BLUE)üß™ Executando testes b√°sicos...$(NC)"
	@./scripts/test-connectivity.sh || echo "$(YELLOW)‚ö†Ô∏è  Script de teste n√£o encontrado$(NC)"

## Meta comandos
install-deps: ## Instala depend√™ncias do sistema
	@echo "$(BLUE)üì¶ Instalando depend√™ncias...$(NC)"
	@which docker >/dev/null || (echo "$(RED)‚ùó Docker n√£o instalado$(NC)" && exit 1)
	@which docker-compose >/dev/null || (echo "$(RED)‚ùó Docker Compose n√£o instalado$(NC)" && exit 1)
	@which make >/dev/null || (echo "$(RED)‚ùó Make n√£o instalado$(NC)" && exit 1)
	@echo "$(GREEN)‚úÖ Todas as depend√™ncias est√£o instaladas!$(NC)"

monitor-up:
	docker-compose up -d prometheus loki grafana node-exporter

monitor-down:
	docker-compose stop prometheus loki grafana node-exporter

monitor-logs:
	docker-compose logs -f prometheus loki grafana

clean-reports:
	./scripts/clean-reports.sh

security-scan:
	docker-compose exec build-server-node dependency-check --project "test-scan" --scan /tmp/sample-project

.PHONY: runbook diagrams adr

runbook:
	@echo "Executando runbook: $(RUNBOOK)"
	@./docs/scripts/runbook-runner.sh docs/runbooks/$(RUNBOOK)

diagrams:
	@./docs/scripts/generate-diagrams.sh

adr:
	@adr-tools new "Adicionar nova ADR"

metrics-up:
	docker-compose up -d cadvisor

metrics-logs:
	docker-compose logs -f cadvisor

.PHONY: backup health-check

backup:
	./backup/scripts/backup-all.sh

health-check:
	./health-check.sh