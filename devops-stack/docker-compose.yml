#version: "3.8"

services:
  gitea:
    extra_hosts:
      - "host.docker.internal:host-gateway"
      - "drone.local:172.20.0.1"
    image: gitea/gitea:1.21
    container_name: gitea
    restart: unless-stopped
    environment:
      # Configurações básicas de usuário
      - USER_UID=${USER_UID}
      - USER_GID=${USER_GID}
      # Configurações do Banco de Dados
      - GITEA__database__DB_TYPE=postgres
      - GITEA__database__HOST=postgres_dbx:5432
      - GITEA__database__NAME=${GITEA_DATABASE}
      - GITEA__database__USER=${GITEA_DATABASE_USER}
      - GITEA__database__PASSWD=${GITEA_DB_PASSWORD}
      - GITEA__database__SSL_MODE=disable
      # Configurações do Servidor
      - GITEA__server__DOMAIN=${GITEA_DOMAIN}
      - GITEA__server__SSH_DOMAIN=${GITEA_DOMAIN}
      - GITEA__server__ROOT_URL=${GITEA_ROOT_URL}
      - GITEA__server__HTTP_PORT=3000
      - GITEA__server__DISABLE_SSH=true
      - GITEA__server__START_SSH_SERVER=false
      - GITEA__server__LFS_START_SERVER=false
      - GITEA__server__OFFLINE_MODE=false
      # OAuth2 Settings
      - GITEA__oauth2__ENABLE=true
      - GITEA__oauth2__JWT_SECRET=${GITEA_OAUTH2_JWT_SECRET}
      # Security Settings
      - GITEA__security__SECRET_KEY=${GITEA_SECRET_KEY}
      - GITEA__security__INTERNAL_TOKEN=${GITEA_INTERNAL_TOKEN}
      # Session Settings
      - GITEA__session__PROVIDER=file
      - GITEA__session__PROVIDER_CONFIG=data/sessions
      # Log Settings
      - GITEA__log__MODE=console,file
      - GITEA__log__LEVEL=Info
      - GITEA__log__ROOT_PATH=/data/gitea/log
      # Configurações de Proxy
      - GITEA__server__ENABLE_REVERSE_PROXY_AUTHENTICATION=false
      - GITEA__server__ENABLE_REVERSE_PROXY_AUTO_REGISTRATION=false
      - GITEA__server__ENABLE_REVERSE_PROXY_EMAIL=false
      - GITEA__server__REVERSE_PROXY_TRUSTED_PROXIES=10.0.0.0/8,172.20.0.0/12,192.168.0.0/16
      # - GITEA__webhook__ALLOWED_HOST_LIST=private
      - GITEA__webhook__ALLOWED_HOST_LIST=172.20.0.0/16
    networks:
      - devops-network
    volumes:
      - ./data/gitea:/data
      - ./config/gitea:/etc/gitea
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - postgres_dbx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: loki
      options:
        loki-url: "http://loki:3100/loki/api/v1/push"
        loki-external-labels: "container={{.Name}},image={{.ImageName}},environment=devops"

  drone-server:
    extra_hosts:
      - "host.docker.internal:host-gateway"
      - "gitea.local:172.20.0.1" # Use o IP do Nginx ou do Host Gateway 
      #- "gitea.local:172.18.0.3" # Use o IP do Nginx ou do Host Gateway 
    image: drone/drone:2.20
    container_name: drone_server
    restart: unless-stopped
    networks:
      - devops-network
    environment:
      #- TZ: ${TZ}
      # Drone Settings
      #- DRONE_GITEA_SERVER=${GITEA_ROOT_REDE}
      - DRONE_GITEA_SERVER=${DRONE_GITEA_SERVER}
      - DRONE_GITEA_CLIENT_ID=${DRONE_GITEA_CLIENT_ID}
      - DRONE_GITEA_CLIENT_SECRET=${DRONE_GITEA_CLIENT_SECRET}
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_RPC_HOST=${DRONE_RPC_HOST}
      # Esta configuração define a URL PÚBLICA do seu Drone
      - DRONE_SERVER_HOST=${DRONE_SERVER_HOST}
      #- DRONE_UI_PATH=${DRONE_UI_PATH}
      - DRONE_SERVER_PROTO=${DRONE_SERVER_PROTO}
      #- DRONE_SERVER_PORT=${DRONE_SERVER_PORT}
      # Database Settings
      - DRONE_DATABASE_DRIVER=postgres
      - DRONE_DATABASE_DATASOURCE=postgres://${DRONE_DATABASE_USER}:${DRONE_DB_PASSWORD}@postgres_dbx:5432/${DRONE_DATABASE}?sslmode=disable
      # User Settings
      - DRONE_USER_CREATE=username:${DRONE_ADMIN_USER},admin:true
      # Security Settings
      - DRONE_LOGS_PRETTY=true
      - DRONE_LOGS_COLOR=true
      - DRONE_GITEA_URL=${DRONE_GITEA_URL}
      # Webhook Settings
      - DRONE_WEBHOOK_ENDPOINT=${DRONE_WEBHOOK_ENDPOINT}
      - DRONE_WEBHOOK_SECRET=${DRONE_WEBHOOK_SECRET}
      # Runner Settings
      - DRONE_AGENTS_ENABLED=true
      - DRONE_HTTP_ADDR=${DRONE_HTTP_ADDR}
    volumes:
      - ./data/drone:/data
      - ./config/drone:/etc/drone
    logging:
      driver: loki
      options:
        loki-url: "http://loki:3100/loki/api/v1/push"
        loki-external-labels: "container={{.Name}},image={{.ImageName}},environment=devops"

  # Drone Runner - CI/CD Runner
  # -------------------- DRONE SSH RUNNER --------------------
  drone-runner-ssh:
    extra_hosts:
      - "host.docker.internal:host-gateway"
      - "build-server-node:172.20.0.1" 
    # image: drone/drone-runner-ssh:latest
    build: ./infra/docker/drone-runner-ssh  # Usar imagem customizada
    container_name: drone_runner_ssh
    restart: unless-stopped
    networks:
      - devops-network
    volumes:
      - ./secrets/ssh/id_rsa.pub:/root/.ssh/authorized_keys:ro
      - ./secrets/ssh/id_rsa:/root/.ssh/id_rsa:ro  # Montar chave privada
      - ./secrets/ssh/id_rsa.pub:/root/.ssh/id_rsa.pub:ro  # Montar chave pública
    environment:
      - DRONE_RPC_PROTO=${DRONE_SERVER_PROTO}
      - DRONE_RPC_HOST=${DRONE_RPC_HOST}
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_RUNNER_CAPACITY=2
      - DRONE_RUNNER_NAME=${DRONE_RUNNER_NAME}
      #- DRONE_RUNNER_LABELS=environment:development,arch:arm64
      - DRONE_RUNNER_LABELS=environment:ssh-build,arch:arm64
      - DRONE_LOGS_PRETTY=true
      - DRONE_LOGS_COLOR=true
    depends_on:
      drone-server:
        condition: service_started
    logging:
      driver: loki
      options:
        loki-url: "http://loki:3100/loki/api/v1/push"
        loki-external-labels: "container={{.Name}},image={{.ImageName}},environment=devops"

  build-server-node:
    extra_hosts:
      - "host.docker.internal:host-gateway"
      - "gitea.local:172.20.0.1" 
      - "sonar.local:172.20.0.1" 
    build:
      context: ./infra/docker/build-server
      dockerfile: Dockerfile
      args:
        NODE_VERSION: "${NODE_VERSION}"
    image: devops-build-server:latest
    container_name: build_server_node
    hostname: build-server-node
    restart: unless-stopped
    logging:
      driver: loki
      options:
        loki-url: "http://loki:3100/loki/api/v1/push"
        loki-external-labels: "container={{.Name}},image={{.ImageName}},environment=devops"
    environment:
      TZ: ${TZ}
      SSH_ENABLE_ROOT: "true"
      SSH_USER_PASSWORD_LOCK: "true"
      NODE_ENV: "production"
    networks:
      - devops-network
    volumes:
       - ./secrets/ssh/id_rsa.pub:/root/.ssh/authorized_keys
       - ./data/build-server:/home/builder/builds
       - build_cache:/root/.cache
    ports:
      - "2222:2222"
      - "8000:8000"
    healthcheck:
      test: ["CMD", "netstat", "-tlnp", "|", "grep", "2222"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  sonarqube:
    image: sonarqube:10.5.1-community
    container_name: sonarqube
    restart: unless-stopped
    environment:
      # Configuração do Banco de Dados
      - SONAR_JDBC_URL=jdbc:postgresql://postgres_dbx:5432/${SONARQUBE_DB_NAME}
      - SONAR_JDBC_USERNAME=${SONARQUBE_DB_USER}
      - SONAR_JDBC_PASSWORD=${SONARQUBE_DB_PASSWORD}
      # Configurações Avançadas
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
      - SONAR_WEB_HOST=0.0.0.0
      - SONAR_WEB_PORT=9000
      # Fuso Horário
      - TZ=${TZ}
    networks:
      - devops-network
    volumes:
      - ./data/sonarqube/data:/opt/sonarqube/data
      - ./data/sonarqube/extensions:/opt/sonarqube/extensions
      - ./data/sonarqube/logs:/opt/sonarqube/logs
    depends_on:
      postgres_dbx:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    logging:
      driver: loki
      options:
        loki-url: "http://loki:3100/loki/api/v1/push"
        loki-external-labels: "container={{.Name}},image={{.ImageName}},environment=devops"

  postgres_dbx:
    image: postgres:16
    container_name: postgres_dbx
    restart: unless-stopped
    logging:
      driver: loki
      options:
        loki-url: "http://loki:3100/loki/api/v1/push"
        loki-external-labels: "container={{.Name}},image={{.ImageName}},environment=devops"
    environment:
      TZ: ${TZ}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      SONARQUBE_DB_USER: ${SONARQUBE_DB_USER}
      SONARQUBE_DB_PASSWORD: ${SONARQUBE_DB_PASSWORD}
      GITEA_DATABASE_USER: ${GITEA_DATABASE_USER}
      GITEA_DB_PASSWORD: ${GITEA_DB_PASSWORD}
      DRONE_DATABASE_USER: ${DRONE_DATABASE_USER}
      DRONE_DB_PASSWORD: ${DRONE_DB_PASSWORD}
    networks:
      - devops-network
    volumes:
      - ./data/postgres/pgdata:/var/lib/postgresql/data
      - ./config/postgres/init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  nginx:
    #extra_hosts:
    #  - "host.docker.internal:host-gateway"
    #  - "gitea.local:172.20.0.1" # Use o IP do Nginx ou do Host Gateway
    #  - "drone.local:172.20.0.1"
    #  - "sonar.local:172.20.0.1"
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    logging:
      driver: loki
      options:
        loki-url: "http://loki:3100/loki/api/v1/push"
        loki-external-labels: "container={{.Name}},image={{.ImageName}},environment=devops"
    ports:
      - "${NGINX_PORT}:80"
      - "${NGINX_SSL_PORT}:443"
    networks:
      - devops-network
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./config/nginx/html:/usr/share/nginx/html
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      gitea:
        condition: service_healthy
      sonarqube:
        condition: service_healthy
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - devops-network
    ports:
      - "9090:9090"

  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: unless-stopped
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml
    networks:
      - devops-network
    ports:
      - "3100:3100"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - devops-network
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
      - loki

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    devices:
      - /dev/kmsg:/dev/kmsg
    ports:
      - "8080:8080"
    networks:
      - devops-network
    depends_on:
      - prometheus

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    networks:
      - devops-network
    ports:
      - "9100:9100"
  
  backup-cron:
    image: alpine:latest
    container_name: backup-cron
    volumes:
      - ./backup:/backup
      - /var/run/docker.sock:/var/run/docker.sock
    command: >
      sh -c "echo '0 2 * * * /backup/scripts/backup-all.sh >> /backup/logs/backup.log 2>&1' > /etc/crontabs/root
             && echo '0 3 * * * /backup/scripts/rotate-backups.sh' >> /etc/crontabs/root
             && crond -f"

networks:
  devops-network:
    name: devops-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  build_cache:
    name: build_cache
    driver: local
  prometheus_data:
  grafana_data: