#version: "3.8"

services:
  gitea:
    extra_hosts:
      - "host.docker.internal:host-gateway"
      - "drone.local:172.18.0.1"
    image: gitea/gitea:1.21
    container_name: gitea
    restart: unless-stopped
    environment:
      # Configurações básicas de usuário
      - USER_UID=${USER_UID}
      - USER_GID=${USER_GID}
      # Configurações do Banco de Dados
      - GITEA__database__DB_TYPE=postgres
      - GITEA__database__HOST=postgres_dbx:5432
      - GITEA__database__NAME=${GITEA_DATABASE}
      - GITEA__database__USER=${GITEA_DATABASE_USER}
      - GITEA__database__PASSWD=${GITEA_DB_PASSWORD}
      - GITEA__database__SSL_MODE=disable
      # Configurações do Servidor
      - GITEA__server__DOMAIN=${GITEA_DOMAIN}
      - GITEA__server__SSH_DOMAIN=${GITEA_DOMAIN}
      - GITEA__server__ROOT_URL=${GITEA_ROOT_URL}
      - GITEA__server__HTTP_PORT=3000
      - GITEA__server__DISABLE_SSH=true
      - GITEA__server__START_SSH_SERVER=false
      - GITEA__server__LFS_START_SERVER=false
      - GITEA__server__OFFLINE_MODE=false
      # OAuth2 Settings
      - GITEA__oauth2__ENABLE=true
      - GITEA__oauth2__JWT_SECRET=${GITEA_OAUTH2_JWT_SECRET}
      # Security Settings
      - GITEA__security__SECRET_KEY=${GITEA_SECRET_KEY}
      - GITEA__security__INTERNAL_TOKEN=${GITEA_INTERNAL_TOKEN}
      # Session Settings
      - GITEA__session__PROVIDER=file
      - GITEA__session__PROVIDER_CONFIG=data/sessions
      # Log Settings
      - GITEA__log__MODE=console,file
      - GITEA__log__LEVEL=Info
      - GITEA__log__ROOT_PATH=/data/gitea/log
      # Configurações de Proxy
      - GITEA__server__ENABLE_REVERSE_PROXY_AUTHENTICATION=false
      - GITEA__server__ENABLE_REVERSE_PROXY_AUTO_REGISTRATION=false
      - GITEA__server__ENABLE_REVERSE_PROXY_EMAIL=false
      - GITEA__server__REVERSE_PROXY_TRUSTED_PROXIES=10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
    networks:
      - devops-network
    volumes:
      - ./data/gitea:/data
      - ./config/gitea:/etc/gitea
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - postgres_dbx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  drone-server:
    image: drone/drone:2.20
    container_name: drone_server
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    depends_on:
      gitea:
        condition: service_healthy
      postgres_dbx:
        condition: service_healthy
    networks:
      - devops-network
    environment:
       TZ: ${TZ}
       DRONE_DATABASE_DRIVER: postgres
       DRONE_DATABASE_DATASOURCE: postgres://${DRONE_DATABASE_USER}:${DRONE_DB_PASSWORD}@postgres_dbx:${POSTGRES_PORT}/${DRONE_DATABASE}?sslmode=disable
       DRONE_GITEA_SERVER: http://gitea:${GITEA_HTTP_PORT}
       DRONE_GITEA_CLIENT_ID: ${DRONE_GITEA_CLIENT_ID}
       DRONE_GITEA_CLIENT_SECRET: ${DRONE_GITEA_CLIENT_SECRET}
       DRONE_RPC_SECRET: ${DRONE_RPC_SECRET}
       DRONE_SERVER_HOST: ${DRONE_SERVER_HOST}
       DRONE_SERVER_PROTO: ${DRONE_SERVER_PROTO}
       DRONE_USER_CREATE: username:${DRONE_ADMIN_USER},admin:true
       DRONE_AGENTS_ENABLED: "true"
       DRONE_REGISTRATION_CLOSED: "true"
    volumes:
      - ./data/drone:/data
      - ./config/drone:/etc/drone
    ports:
      - "8000:80"
    command: ["sh", "-c", "drone server --config /etc/drone/config.toml && tail -f /dev/null"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  drone-runner-ssh:
    image: drone/drone-runner-ssh:latest
    container_name: drone_runner_ssh
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    depends_on:
      drone-server:
        condition: service_healthy
    networks:
      - devops-network
    environment:
      TZ: ${TZ}
      DRONE_RPC_HOST: ${DRONE_RPC_HOST}
      DRONE_RPC_PROTO: ${DRONE_SERVER_PROTO}
      DRONE_RPC_SECRET: ${DRONE_RPC_SECRET}
      DRONE_RUNNER_NAME: ${DRONE_RUNNER_NAME}
      DRONE_RUNNER_CAPACITY: "2"
      DRONE_RUNNER_LABELS: "environment:ssh-build,arch:arm64,type:node"
    ports:
      - "3001:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  build-server-node:
    build:
      context: ./infra/docker/build-server
      dockerfile: Dockerfile
      args:
        NODE_VERSION: "${NODE_VERSION}"
    image: devops-build-server:latest
    container_name: build_server_node
    hostname: build-server-node
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    environment:
      TZ: ${TZ}
      SSH_ENABLE_ROOT: "true"
      SSH_USER_PASSWORD_LOCK: "true"
      NODE_ENV: "production"
    networks:
      - devops-network
    volumes:
      - ./secrets/ssh/id_rsa.pub:/root/.ssh/authorized_keys:ro
      - ./data/build-server:/root/builds
      - build_cache:/root/.cache
    ports:
      - "8022:22"
    healthcheck:
      test: ["CMD", "pgrep", "sshd"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  sonarqube:
    image: sonarqube:10.5.1-community
    container_name: sonarqube
    restart: unless-stopped
    environment:
      # Configuração do Banco de Dados
      - SONAR_JDBC_URL=jdbc:postgresql://postgres_dbx:5432/${SONARQUBE_DB_NAME}
      - SONAR_JDBC_USERNAME=${SONARQUBE_DB_USER}
      - SONAR_JDBC_PASSWORD=${SONARQUBE_DB_PASSWORD}
      # Configurações Avançadas
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
      - SONAR_WEB_HOST=0.0.0.0
      - SONAR_WEB_PORT=9000
      # Fuso Horário
      - TZ=${TZ}
    networks:
      - devops-network
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    ports:
      - "${SONARQUBE_PORT}:9000"
    depends_on:
      postgres_dbx:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536

  postgres_dbx:
    image: postgres:16
    container_name: postgres_dbx
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    environment:
      TZ: ${TZ}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      SONARQUBE_DB_USER: ${SONARQUBE_DB_USER}
      SONARQUBE_DB_PASSWORD: ${SONARQUBE_DB_PASSWORD}
      GITEA_DATABASE_USER: ${GITEA_DATABASE_USER}
      GITEA_DB_PASSWORD: ${GITEA_DB_PASSWORD}
      DRONE_DATABASE_USER: ${DRONE_DATABASE_USER}
      DRONE_DB_PASSWORD: ${DRONE_DB_PASSWORD}
    networks:
      - devops-network
    volumes:
      - ./data/postgres/pgdata:/var/lib/postgresql/data
      - ./config/postgres/init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  nginx:
    #extra_hosts:
    #  - "host.docker.internal:host-gateway"
    #  - "gitea.local:172.18.0.1" # Use o IP do Nginx ou do Host Gateway
    #  - "drone.local:172.18.0.1"
    #  - "sonar.local:172.18.0.1"
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    ports:
      - "${NGINX_PORT}:80"
      - "${NGINX_SSL_PORT}:443"
    networks:
      - devops-network
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./config/nginx/html:/usr/share/nginx/html
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      gitea:
        condition: service_healthy
      drone-server:
        condition: service_healthy
      sonarqube:
        condition: service_healthy

networks:
  devops-network:
    name: devops-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  build_cache:
    name: build_cache
    driver: local
  sonarqube_data:
    name: sonarqube_data
    driver_opts:
      type: none
      device: ./data/sonarqube/data
      o: bind
  sonarqube_extensions:
    name: sonarqube_extensions
    driver_opts:
      type: none
      device: ./data/sonarqube/extensions
      o: bind
  sonarqube_logs:
    name: sonarqube_logs
    driver_opts:
      type: none
      device: ./data/sonarqube/logs
      o: bind