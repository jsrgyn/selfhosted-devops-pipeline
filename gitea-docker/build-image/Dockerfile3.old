# ==============================================================================
# Dockerfile para Servidor de Build ARM64 com ferramentas de rede, monitoramento e build
# ==============================================================================

FROM --platform=linux/arm64 ubuntu:jammy

ENV DEBIAN_FRONTEND=noninteractive

# ==============================================================================
# Instala pacotes essenciais de sistema, rede e monitoramento
# ==============================================================================
RUN apt-get update && apt-get install -y --no-install-recommends \
    openssh-server \
    sudo \
    jq \
    git \
    curl \
    ca-certificates \
    apt-utils \
    openjdk-17-jre \
    wget \
    unzip \
    htop \
    iputils-ping \
    net-tools \
    dnsutils \
    lsof \
    # --- NOVO ---
    # G++/make para compilar pacotes nativos (útil para Node addons)
    build-essential \
    # Alguns pacotes de Node.js precisam disso em ambiente de CI
    python3 \
    # Para instalar ferramentas auxiliares como httpie
    python3-pip \
    # Testes de portas e conexões
    netcat \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# ==============================================================================
# Instala Node.js 18 + Yarn
# ==============================================================================
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs \
    && npm install -g yarn

# ==============================================================================
# Instala o SonarScanner via NPM (compatível com ARM64)
# ==============================================================================
# RUN npm install -g sonarqube-scanner
RUN wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip \
    && unzip sonar-scanner-cli-5.0.1.3006-linux.zip -d /opt \
    && ln -s /opt/sonar-scanner-*/bin/sonar-scanner /usr/local/bin/sonar-scanner

# ==============================================================================
# Instala o PM2 globalmente
# ==============================================================================
RUN npm install -g pm2

# ==============================================================================
# (Opcional) Instala ferramentas extras úteis para troubleshooting e CI/CD
# ==============================================================================
# --- NOVO ---
RUN npm install -g serve concurrently \
    && pip install httpie \
    && echo 'alias ll="ls -alF"' >> /root/.bashrc \
    && echo 'alias ..="cd .."' >> /root/.bashrc

# ==============================================================================
# Configura SSH
# ==============================================================================
RUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config \
    && sed -i 's/root:\*:/root::/' /etc/shadow \
    && sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd \
    && mkdir -p /run/sshd \
    && mkdir -p /home/ubuntu/builds \
    && mkdir -p /root/.ssh && chmod 700 /root/.ssh

# ==============================================================================
# Adiciona um usuário não-root com permissão de sudo (opcional e seguro)
# ==============================================================================
# --- NOVO ---
RUN useradd -m -s /bin/bash builder \
    && echo 'builder ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers \
    && mkdir -p /home/builder/.ssh && chmod 700 /home/builder/.ssh

# Copiar a chave pública manualmente no runtime:
# docker run -v ./ssh/id_rsa.pub:/root/.ssh/authorized_keys

# ==============================================================================
# Expõe as portas necessárias
# ==============================================================================
# Acesso SSH
EXPOSE 22

# Porta da aplicação Node.js (Ex: pm2 serve, nest start, etc.)
EXPOSE 8000

# ==============================================================================
# Comando de inicialização padrão
# ==============================================================================
CMD ["/usr/sbin/sshd", "-D"]